
7447.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000663  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057f  00000000  00000000  000007ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027c  00000000  00000000  00000d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f6  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e8  00000000  00000000  00001316  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{  
	 DDRC = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{  
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	4f ef       	ldi	r20, 0xFF	; 255
  76:	59 ef       	ldi	r21, 0xF9	; 249
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	41 50       	subi	r20, 0x01	; 1
  7c:	50 40       	sbci	r21, 0x00	; 0
  7e:	80 40       	sbci	r24, 0x00	; 0
  80:	e1 f7       	brne	.-8      	; 0x7a <main+0xe>
  82:	00 c0       	rjmp	.+0      	; 0x84 <main+0x18>
  84:	00 00       	nop
  86:	80 e0       	ldi	r24, 0x00	; 0
			
			_delay_ms(20);
			for(int k=0;k<=9;k++)
				{
					
				PORTC = k|a;
  88:	98 2f       	mov	r25, r24
  8a:	92 2b       	or	r25, r18
  8c:	95 bb       	out	0x15, r25	; 21
  8e:	9f ef       	ldi	r25, 0xFF	; 255
  90:	40 e7       	ldi	r20, 0x70	; 112
  92:	52 e0       	ldi	r21, 0x02	; 2
  94:	91 50       	subi	r25, 0x01	; 1
  96:	40 40       	sbci	r20, 0x00	; 0
  98:	50 40       	sbci	r21, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
  a0:	8f 5f       	subi	r24, 0xFF	; 255
		
		for(int i=0;i<=9;i++)
		{
			
			_delay_ms(20);
			for(int k=0;k<=9;k++)
  a2:	8a 30       	cpi	r24, 0x0A	; 10
  a4:	89 f7       	brne	.-30     	; 0x88 <main+0x1c>
				PORTC = k|a;
			  _delay_ms(50);
			  
			   }
			
			a=a+0b00010000;
  a6:	20 5f       	subi	r18, 0xF0	; 240
  a8:	3f 4f       	sbci	r19, 0xFF	; 255
			PORTC=a|0;
  aa:	25 bb       	out	0x15, r18	; 21
	 int a=0;
	/* Replace with your application code */
	while (1)
	{
		
		for(int i=0;i<=9;i++)
  ac:	20 3a       	cpi	r18, 0xA0	; 160
  ae:	31 05       	cpc	r19, r1
  b0:	09 f7       	brne	.-62     	; 0x74 <main+0x8>
			
			a=a+0b00010000;
			PORTC=a|0;
		}
		a=0;
		PORTC=0;
  b2:	15 ba       	out	0x15, r1	; 21
		
	 }
  b4:	dd cf       	rjmp	.-70     	; 0x70 <main+0x4>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
