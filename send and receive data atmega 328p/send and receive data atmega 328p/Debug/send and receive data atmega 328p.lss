
send and receive data atmega 328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000118  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000803  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000748  00000000  00000000  00000a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000322  00000000  00000000  0000118b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000014b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f5  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e8  00000000  00000000  00001915  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000019fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  8e:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_init>:
	return 0;
}

void USART_init(void){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ac:	08 95       	ret

000000ae <USART_receive>:
}

unsigned char USART_receive(void){
	
	while(!(UCSR0A & (1<<RXC0)));
  ae:	e0 ec       	ldi	r30, 0xC0	; 192
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 23       	and	r24, r24
  b6:	ec f7       	brge	.-6      	; 0xb2 <USART_receive+0x4>
	return UDR0;
  b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
}
  bc:	08 95       	ret

000000be <main>:
void USART_putInt(int number);

char String[]="Hello World!!";    //String[] is in fact an array but when we put the text between the " " symbols the compiler threats it as a String and automatically puts the null termination character in the end of the text
int i=1;
int main(void){
	DDRC=0xff;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	87 b9       	out	0x07, r24	; 7
	USART_init();        //Call the USART initialization code
  c2:	0e 94 4b 00 	call	0x96	; 0x96 <USART_init>
	
	while(1){        //Infinite loop
		UDR0=i;
  c6:	00 e0       	ldi	r16, 0x00	; 0
  c8:	11 e0       	ldi	r17, 0x01	; 1
  ca:	c6 ec       	ldi	r28, 0xC6	; 198
  cc:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_ms(100);
		i++;
		
		if(i>63)
		{
			i=1;
  ce:	ee 24       	eor	r14, r14
  d0:	e3 94       	inc	r14
  d2:	f1 2c       	mov	r15, r1
int main(void){
	DDRC=0xff;
	USART_init();        //Call the USART initialization code
	
	while(1){        //Infinite loop
		UDR0=i;
  d4:	f8 01       	movw	r30, r16
  d6:	80 81       	ld	r24, Z
  d8:	88 83       	st	Y, r24
		unsigned char y=USART_receive();
  da:	0e 94 57 00 	call	0xae	; 0xae <USART_receive>
		PORTC=y;
  de:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	ff ef       	ldi	r31, 0xFF	; 255
  e2:	21 ee       	ldi	r18, 0xE1	; 225
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	f1 50       	subi	r31, 0x01	; 1
  e8:	20 40       	sbci	r18, 0x00	; 0
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x28>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x32>
  f0:	00 00       	nop
		_delay_ms(100);
		i++;
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
		if(i>63)
 104:	80 34       	cpi	r24, 0x40	; 64
 106:	91 05       	cpc	r25, r1
 108:	2c f3       	brlt	.-54     	; 0xd4 <main+0x16>
		{
			i=1;
 10a:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__data_start+0x1>
 10e:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__data_start>
 112:	e0 cf       	rjmp	.-64     	; 0xd4 <main+0x16>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
