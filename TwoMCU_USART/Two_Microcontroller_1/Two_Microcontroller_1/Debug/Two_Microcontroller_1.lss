
Two_Microcontroller_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a8  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f6  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d5  00000000  00000000  0000108a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001360  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d6  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009b  00000000  00000000  00001786  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001821  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <send_usart>:
    }
}

void send_usart( unsigned char data )
{
    while (( UCSR0A & (1<<UDRE0))  == 0){};
  80:	e0 ec       	ldi	r30, 0xC0	; 192
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	90 81       	ld	r25, Z
  86:	95 ff       	sbrs	r25, 5
  88:	fd cf       	rjmp	.-6      	; 0x84 <send_usart+0x4>
    UDR0 = data;
  8a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  8e:	08 95       	ret

00000090 <rcv_usart>:
}

void rcv_usart()
{
    while (!(UCSR0A & (1<<RXC0)) ){};
  90:	e0 ec       	ldi	r30, 0xC0	; 192
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	88 23       	and	r24, r24
  98:	ec f7       	brge	.-6      	; 0x94 <rcv_usart+0x4>
    PORTC = UDR0;
  9a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  9e:	88 b9       	out	0x08, r24	; 8
  a0:	08 95       	ret

000000a2 <main>:
#include <util/delay.h>
#define F_CPU 16000000
#define BUAD 19200
#define BUAD_RATE_CALC ((F_CPU/16/BUAD) - 1)

int main(void){
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
    
    //High and low bits
    UBRR0H = (BUAD_RATE_CALC >> 8);
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = BUAD_RATE_CALC;
  aa:	83 e3       	ldi	r24, 0x33	; 51
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    ////////////////
    //transimit and recieve enable
    UCSR0B = (1 << TXEN0)| (1 << TXCIE0) | (1 << RXEN0) | (1 << RXCIE0);
  b0:	88 ed       	ldi	r24, 0xD8	; 216
  b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  //8 bit data format
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    ////////////////////////////////////////////////////////////////
    int i = 0;
    int counter = 0;
    DDRC = 0xff;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 b9       	out	0x07, r24	; 7
    //transimit and recieve enable
    UCSR0B = (1 << TXEN0)| (1 << TXCIE0) | (1 << RXEN0) | (1 << RXCIE0);
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  //8 bit data format
    ////////////////////////////////////////////////////////////////
    int i = 0;
    int counter = 0;
  c0:	c0 e0       	ldi	r28, 0x00	; 0
  c2:	d0 e0       	ldi	r29, 0x00	; 0
    DDRC = 0xff;
    while (1)
	{
        send_usart(counter);
  c4:	ce 01       	movw	r24, r28
  c6:	0e 94 40 00 	call	0x80	; 0x80 <send_usart>
        rcv_usart();
  ca:	0e 94 48 00 	call	0x90	; 0x90 <rcv_usart>
        counter++;
  ce:	21 96       	adiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f e3       	ldi	r18, 0x3F	; 63
  d2:	8d e0       	ldi	r24, 0x0D	; 13
  d4:	93 e0       	ldi	r25, 0x03	; 3
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x34>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x3e>
  e0:	00 00       	nop
        _delay_ms(1000);
        if(counter == 100)
  e2:	c4 36       	cpi	r28, 0x64	; 100
  e4:	d1 05       	cpc	r29, r1
  e6:	71 f7       	brne	.-36     	; 0xc4 <main+0x22>
		{
            return 0;
		} 
    }
}
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
