
7seg led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000ec  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000064d  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000591  00000000  00000000  00000845  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000266  00000000  00000000  00000dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000103c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000323  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000123  00000000  00000000  00001393  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
char dis [] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x67};
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
DDRD = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	81 bb       	out	0x11, r24	; 17
DDRB = 0xFF;
  ac:	87 bb       	out	0x17, r24	; 23
  ae:	9e 01       	movw	r18, r28
  b0:	25 5f       	subi	r18, 0xF5	; 245
  b2:	3f 4f       	sbci	r19, 0xFF	; 255

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
DDRB = 0xFF;
	        while (1) 
    {		
		for (int k=0;k<=9;k++)
		{
			PORTD= dis[0];
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	82 bb       	out	0x12, r24	; 18
			PORTB= dis[k];
  bc:	8d 91       	ld	r24, X+
  be:	88 bb       	out	0x18, r24	; 24
  c0:	fe 01       	movw	r30, r28
  c2:	31 96       	adiw	r30, 0x01	; 1
			int i=0;
			for (i=0;i<=9;i++)
			{
				PORTD = dis[i];
  c4:	81 91       	ld	r24, Z+
  c6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	4f ef       	ldi	r20, 0xFF	; 255
  ca:	84 e3       	ldi	r24, 0x34	; 52
  cc:	9c e0       	ldi	r25, 0x0C	; 12
  ce:	41 50       	subi	r20, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x4c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x56>
  d8:	00 00       	nop
		for (int k=0;k<=9;k++)
		{
			PORTD= dis[0];
			PORTB= dis[k];
			int i=0;
			for (i=0;i<=9;i++)
  da:	e2 17       	cp	r30, r18
  dc:	f3 07       	cpc	r31, r19
  de:	91 f7       	brne	.-28     	; 0xc4 <main+0x42>
char dis [] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x67};
DDRD = 0xFF;
DDRB = 0xFF;
	        while (1) 
    {		
		for (int k=0;k<=9;k++)
  e0:	a2 17       	cp	r26, r18
  e2:	b3 07       	cpc	r27, r19
  e4:	49 f7       	brne	.-46     	; 0xb8 <main+0x36>
  e6:	e6 cf       	rjmp	.-52     	; 0xb4 <main+0x32>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
